{"version":3,"sources":["components/phoneBook/contactList/ContactList.module.css","components/phoneBook/PhoneBook.module.css","components/phoneBook/insert/Insert.module.css","components/phoneBook/notification/Notification.module.css","components/phoneBook/contactFilter/ContactFilter.module.css","components/redux/tasks/contactsActions.js","components/redux/tasks/contactsOperations.js","components/phoneBook/insert/Insert.js","components/phoneBook/notification/Notofication.js","components/redux/tasks/contactsSelectors.js","components/phoneBook/contactForm/ContactForm.js","components/phoneBook/contactList/ContactList.js","components/phoneBook/contactFilter/ContactFilter.js","components/phoneBook/PhoneBook.js","components/App.js","components/redux/tasks/contactsReducer.js","components/redux/store.js","index.js","components/phoneBook/contactForm/ContactForm.module.css"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","removeContactsRequest","removeContactsSuccess","removeContactsError","onHandleFilter","addContact","name","number","dispatch","contactsActions","axios","post","then","data","catch","error","fetchContacts","get","removeContact","id","delete","Insert","className","Styles","NotificationWrapper","Notification","getContact","state","contacts","contactList","getFilter","filter","getFilteredContacts","createSelector","contact","toLowerCase","includes","ContactForm","newContact","showAlert","showEmpty","handleChange","e","target","setState","value","handleSubmit","preventDefault","props","some","setTimeout","this","onSubmit","s","form","label","input","type","onChange","button","CSSTransition","in","timeout","classNames","unmountOnExit","Component","mapDispatchToProps","contactsOperations","connect","contactsSelectors","onHandleDelete","dataset","TransitionGroup","component","list","map","listItem","data-id","onClick","PhoneBook","onfetchContacts","appear","title","App","createReducer","action","payload","toString","_","combineReducers","store","configureStore","reducer","contactsReducers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d71800ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2rwWU\",\"listItem\":\"ContactList_listItem__m9l29\",\"button\":\"ContactList_button__2e2VC\",\"name\":\"ContactList_name__2jN4w\",\"enter\":\"ContactList_enter__LrllS\",\"enterActive\":\"ContactList_enterActive__3JHaD\",\"exit\":\"ContactList_exit__2UTvx\",\"exitActive\":\"ContactList_exitActive__9h-Ch\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"PhoneBook_appear__2ua1o\",\"appearActive\":\"PhoneBook_appearActive__1nLzj\",\"title\":\"PhoneBook_title__3hOjs\",\"enter\":\"PhoneBook_enter__3N6Jn\",\"enterActive\":\"PhoneBook_enterActive__14uyq\",\"exit\":\"PhoneBook_exit__vq3hY\",\"exitActive\":\"PhoneBook_exitActive__iKFtt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NotificationWrapper\":\"Insert_NotificationWrapper__hLTLd\",\"appear\":\"Insert_appear__s-PdR\",\"appearActive\":\"Insert_appearActive__g-5dJ\",\"exit\":\"Insert_exit__3I5km\",\"exitActive\":\"Insert_exitActive__T3yM2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NotificationWrapper\":\"Notification_NotificationWrapper__1Mc8Z\",\"appear\":\"Notification_appear__jKpO9\",\"appearActive\":\"Notification_appearActive__3yph5\",\"exit\":\"Notification_exit__Hoe2h\",\"exitActive\":\"Notification_exitActive__6Sooh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactFilter_input__3SnHw\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContactRequest = createAction(\"contacts/addRequest\");\r\nconst addContactSuccess = createAction(\"contacts/addSuccess\");\r\nconst addContactError = createAction(\"contacts/addError\");\r\n\r\nconst fetchContactsRequest = createAction(\"contacts/fetchRequest\");\r\nconst fetchContactsSuccess = createAction(\"contacts/fetchSuccess\");\r\nconst fetchContactsError = createAction(\"contacts/fetchError\");\r\n\r\nconst removeContactsRequest = createAction(\"contacts/removeRequest\");\r\nconst removeContactsSuccess = createAction(\"contacts/removeSuccess\");\r\nconst removeContactsError = createAction(\"contacts/removeError\");\r\n\r\n// const addContact = createAction(\"contacts/add.ADD\", ({ name, number }) => ({\r\n//   payload: {\r\n//     contact: {\r\n//       id: uuidv4(),\r\n//       name,\r\n//       number,\r\n//     },\r\n//   },\r\n// }));\r\n\r\n//  const deleteContact = createAction(\"contacts/remove\");\r\n\r\nconst onHandleFilter = createAction(\"contacts/handleFilter\");\r\n// const localStorage = createAction(\"contacts/localStorage\");\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  // deleteContact,\r\n  onHandleFilter,\r\n  removeContactsRequest,\r\n  removeContactsSuccess,\r\n  removeContactsError,\r\n  // localStorage,\r\n};\r\n","import axios from \"axios\";\r\nimport contactsActions from \"./contactsActions\";\r\n\r\nconst addContact = ({ name, number }) => (dispatch) => {\r\n  dispatch(contactsActions.addContactRequest());\r\n  axios\r\n    .post(\"http://localhost:2000/contacts\", { name, number })\r\n    .then(({ data }) => {\r\n      dispatch(contactsActions.addContactSuccess(data));\r\n    })\r\n    .catch((error) => dispatch(contactsActions.addContactError(error)));\r\n};\r\nconst fetchContacts = () => (dispatch) => {\r\n  dispatch(contactsActions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get(\"http://localhost:2000/contacts\")\r\n    .then(({ data }) => dispatch(contactsActions.fetchContactsSuccess(data)))\r\n    .catch((error) => dispatch(contactsActions.fetchContactsError(error)));\r\n};\r\nconst removeContact = (id) => (dispatch) => {\r\n  dispatch(contactsActions.removeContactsRequest());\r\n\r\n  axios\r\n    .delete(`http://localhost:2000/contacts/${id}`)\r\n    .then(() => dispatch(contactsActions.removeContactsSuccess(id)))\r\n    .catch((error) => dispatch(contactsActions.removeContactsError(error)));\r\n};\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  addContact,\r\n  fetchContacts,\r\n  removeContact,\r\n};\r\n","import React from \"react\";\r\nimport Styles from \"./Insert.module.css\";\r\n\r\nconst Insert = () => {\r\n  return (\r\n    <div className={Styles.NotificationWrapper}>\r\n      {`Insert number, please`}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Insert;\r\n","import React from \"react\";\r\nimport Styles from \"./Notification.module.css\";\r\n\r\nconst Notification = ({ name }) => {\r\n  return (\r\n    <div className={Styles.NotificationWrapper}>\r\n      {`${name} is already in list`}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getContact = (state) => state.contacts.contactList;\r\nconst getFilter = (state) => state.contacts.filter;\r\nconst getFilteredContacts = createSelector(\r\n  [getFilter, getContact],\r\n  (filter, contacts) => {\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  }\r\n);\r\n// const getFilteredContacts = (state) => {\r\n//   const filter = getFilter(state).toLowerCase();\r\n//   const contactList = getContact(state);\r\n\r\n//   return contactList.filter((contact) =>\r\n//     contact.name.toLowerCase().includes(filter)\r\n//   );\r\n// };\r\n\r\nexport default {\r\n  getContact,\r\n  getFilter,\r\n  getFilteredContacts,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport s from \"./ContactForm.module.css\";\r\nimport contactsOperations from \"../../redux/tasks/contactsOperations\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport Insert from \"../insert/Insert\";\r\nimport Notification from \"../notification/Notofication\";\r\nimport contactActions from \"../../redux/tasks/contactsActions\";\r\nimport contactsSelectors from \"../../redux/tasks/contactsSelectors\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n    newContact: null,\r\n    showAlert: false,\r\n    showEmpty: false,\r\n  };\r\n\r\n  // componentDidMount() {\r\n  //   const contacts = localStorage.getItem(\"contacts\");\r\n\r\n  //   if (contacts) {\r\n  //     this.props.localStorage(JSON.parse(contacts));\r\n  //   }\r\n  // }\r\n\r\n  // componentDidUpdate(prevProps) {\r\n  //   const { contacts } = this.props;\r\n\r\n  //   if (prevProps.contacts !== contacts) {\r\n  //     localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n  //   }\r\n  // }\r\n\r\n  handleChange = (e) => {\r\n    const name = e.target.name;\r\n    this.setState({ [name]: e.target.value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      this.props.contacts.some((contact) => contact.name === this.state.name)\r\n    ) {\r\n      this.setState({ newContact: this.state.name, showAlert: true });\r\n      setTimeout(() => {\r\n        this.setState({ showAlert: false });\r\n      }, 2500);\r\n    } else if (this.state.name === \"\" || this.state.contact === \"\") {\r\n      this.setState({ showEmpty: true });\r\n      setTimeout(() => {\r\n        this.setState({ showEmpty: false });\r\n      }, 2500);\r\n    } else {\r\n      this.props.addContact({\r\n        name: this.state.name,\r\n        number: this.state.number,\r\n      });\r\n    }\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { newContact, showAlert, showEmpty } = this.state;\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit} className={s.form}>\r\n          <label className={s.label}>\r\n            Name\r\n            <input\r\n              className={s.input}\r\n              name=\"name\"\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              onChange={this.handleChange}\r\n            ></input>\r\n          </label>\r\n          <label className={s.label}>\r\n            Number\r\n            <input\r\n              className={s.input}\r\n              name=\"number\"\r\n              type=\"tel\"\r\n              value={this.state.number}\r\n              onChange={this.handleChange}\r\n            ></input>\r\n          </label>\r\n          <button className={s.button} type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n        <CSSTransition\r\n          in={showAlert}\r\n          timeout={250}\r\n          classNames={s}\r\n          unmountOnExit\r\n        >\r\n          <Notification name={newContact} />\r\n        </CSSTransition>\r\n        <CSSTransition\r\n          in={showEmpty}\r\n          timeout={250}\r\n          classNames={s}\r\n          unmountOnExit\r\n        >\r\n          <Insert />\r\n        </CSSTransition>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  addContact: contactsOperations.addContact,\r\n  // localStorage: contactActions.localStorage,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    contacts: contactsSelectors.getContact(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport s from \"./ContactList.module.css\";\r\nimport contactsOperations from \"../../redux/tasks/contactsOperations\";\r\nimport contactsActions from \"../../redux/tasks/contactsActions\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport contactsSelectors from \"../../redux/tasks/contactsSelectors\";\r\n\r\nconst ContactList = ({ contacts, removeContact }) => {\r\n  const onHandleDelete = (e) => {\r\n    const id = e.target.dataset.id;\r\n    removeContact(id);\r\n  };\r\n  return (\r\n    <div>\r\n      <h2>Contacts</h2>\r\n      <TransitionGroup component=\"ul\" className={s.list}>\r\n        {contacts.map((contact) => {\r\n          return (\r\n            <CSSTransition key={contact.id} timeout={250} classNames={s}>\r\n              <li key={contact.id} className={s.listItem}>\r\n                <span className={s.name}>{contact.name}</span>:{\" \"}\r\n                <span>{contact.number}</span>\r\n                <button\r\n                  className={s.button}\r\n                  type=\"button\"\r\n                  data-id={contact.id}\r\n                  onClick={onHandleDelete}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            </CSSTransition>\r\n          );\r\n        })}\r\n      </TransitionGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      // name: PropTypes.string,\r\n      // number: PropTypes.string,\r\n      // id: PropTypes.string,\r\n    })\r\n  ),\r\n  onDeleteContact: PropTypes.func,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactsSelectors.getFilteredContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    removeContact: (id) => {\r\n      dispatch(contactsOperations.removeContact(id));\r\n    },\r\n\r\n    // getFiltredContacts: ({ contacts, filter }) => {\r\n    //     dispatch(contactsActions.getFiltredContacts())\r\n    // }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./ContactFilter.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/tasks/contactsActions\";\r\nimport contactsSelectors from \"../../redux/tasks/contactsSelectors\";\r\n\r\nconst ContactFilter = ({ value, onHandleFilter }) => {\r\n  return (\r\n    <div>\r\n      <h3>Find contacts by name</h3>\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={(e) => onHandleFilter(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nContactFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onHandleFilter: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onHandleFilter: contactsActions.onHandleFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactFilter);\r\n","import React, { Component } from \"react\";\r\nimport ContactForm from \"./contactForm/ContactForm\";\r\nimport { connect } from \"react-redux\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport ContactList from \"./contactList/ContactList\";\r\nimport ContactFilter from \"./contactFilter/ContactFilter\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport s from \"./PhoneBook.module.css\";\r\nimport contactsOperations from \"../redux/tasks/contactsOperations\";\r\nimport contactsSelectors from \"../redux/tasks/contactsSelectors\";\r\n// import Notification from \"./notification/Notofication\";\r\n// import Insert from \"./insert/Insert\";\r\n\r\nclass PhoneBook extends Component {\r\n  componentDidMount() {\r\n    this.props.onfetchContacts();\r\n  }\r\n  render() {\r\n    // const { newContact, showAlert, showInsert } = this.state;\r\n    return (\r\n      <div>\r\n        <CSSTransition in={true} appear={true} timeout={500} classNames={s}>\r\n          <h1 className={s.title}>Phonebook</h1>\r\n        </CSSTransition>\r\n        <ContactForm />\r\n\r\n        <ContactFilter />\r\n\r\n        <ContactList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    contacts: contactsSelectors.getContact(state),\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  onfetchContacts: contactsOperations.fetchContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PhoneBook);\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport PhoneBook from \"./phoneBook/PhoneBook\";\r\n\r\nconst App = () => {\r\n  return <PhoneBook />;\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport contactsActions from \"./contactsActions\";\r\n\r\nconst addContact = (state, action) => {\r\n  return [...state, action.payload];\r\n};\r\nconst removeContact = (state, action) => {\r\n  return state.filter((contact) => contact.id.toString() !== action.payload);\r\n};\r\n\r\nconst contactList = createReducer([], {\r\n  [contactsActions.fetchContactsSuccess]: (state, action) => action.payload,\r\n  [contactsActions.addContactSuccess]: addContact,\r\n  [contactsActions.removeContactsSuccess]: removeContact,\r\n  // [contactsActions.localStorage]: (_, action) => action.payload,\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [contactsActions.onHandleFilter]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contactList,\r\n  filter,\r\n});\r\n\r\n//  state = {\r\n//     contacts: [],\r\n//     filter: \"\",\r\n//     newContact: null,\r\n//     showAlert: false,\r\n//     showEmpty: false,\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     const persistedContacts = localStorage.getItem(\"contacts\");\r\n//     if (persistedContacts) {\r\n//       this.setState({\r\n//         contacts: JSON.parse(persistedContacts),\r\n//       });\r\n//     }\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (prevState.contacts !== this.state.contacts) {\r\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n//     }\r\n//   }\r\n\r\n//   addContact = ({ name, number }) => {\r\n//     const { contacts } = this.state;\r\n//     const contact = {\r\n//       id: uuidv4(),\r\n//       name,\r\n//       number,\r\n//     };\r\n\r\n//     if (contacts.find((el) => el.name.toLowerCase() === name.toLowerCase())) {\r\n//       this.setState({ newContact: contact.name, showAlert: true });\r\n//       setTimeout(\r\n//         () => this.setState({ newContact: null, showAlert: false }),\r\n//         2500\r\n//       );\r\n//       return;\r\n//     }\r\n//     if (!name.length || !number.length) {\r\n//       this.setState({ showInsert: true });\r\n//       setTimeout(() => this.setState({ showInsert: false }), 2500);\r\n//       return;\r\n//     }\r\n//     this.setState((prevState) => {\r\n//       return {\r\n//         contacts: [...prevState.contacts, contact],\r\n//       };\r\n//     });\r\n//   };\r\n\r\n//   deleteContact = (e) => {\r\n//     const id = e.target.dataset.id;\r\n//     this.setState({\r\n//       contacts: [...this.state.contacts.filter((contact) => contact.id !== id)],\r\n//     });\r\n//   };\r\n\r\n//   onHandleFilter = (e) => {\r\n//     this.setState({ filter: e.target.value });\r\n//   };\r\n\r\n//   getFiltredContacts = () => {\r\n//     const { contacts, filter } = this.state;\r\n//     return contacts.filter((contact) =>\r\n//       contact.name.toLowerCase().includes(filter.toLowerCase())\r\n//     );\r\n//   };\r\n","import contactsReducers from \"./tasks/contactsReducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducers,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\nimport store from \"./components/redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2JwdU\",\"label\":\"ContactForm_label__38rEX\",\"input\":\"ContactForm_input__m3mH0\",\"button\":\"ContactForm_button__2XgbA\"};"],"sourceRoot":""}